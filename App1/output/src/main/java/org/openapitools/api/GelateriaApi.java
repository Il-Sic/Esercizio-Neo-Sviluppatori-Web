/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Gelato;
import org.openapitools.model.Prenotante;
import org.openapitools.model.Prenotazione;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-02T12:45:11.821636+02:00[Europe/Rome]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "gelateria", description = "the gelateria API")
public interface GelateriaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /gelateria/gelati : Ottieni una lista di gelati
     *
     * @return Lista di gelati disponibile con successo (status code 200)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaGelatiGet",
        summary = "Ottieni una lista di gelati",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista di gelati disponibile con successo", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Gelato.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gelateria/gelati",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Gelato>> gelateriaGelatiGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"descrizione\" : \"Gelato al cioccolato realizzato con ingredienti di alta qualità.\", \"nome\" : \"nome\", \"id\" : 0 }, { \"descrizione\" : \"Gelato al cioccolato realizzato con ingredienti di alta qualità.\", \"nome\" : \"nome\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /gelateria/gelati/{id} : Cancella un gelato tramite ID
     *
     * @param id ID del gelato da cancellare (required)
     * @return Gelato cancellato con successo (status code 204)
     *         or Gelato non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaGelatiIdDelete",
        summary = "Cancella un gelato tramite ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Gelato cancellato con successo"),
            @ApiResponse(responseCode = "404", description = "Gelato non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/gelateria/gelati/{id}"
    )
    
    default ResponseEntity<Void> gelateriaGelatiIdDelete(
        @Parameter(name = "id", description = "ID del gelato da cancellare", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gelateria/gelati/{id} : Ottieni un singolo gelato tramite ID
     *
     * @param id ID del gelato (required)
     * @return Dettagli del gelato recuperati con successo (status code 200)
     *         or Gelato non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaGelatiIdGet",
        summary = "Ottieni un singolo gelato tramite ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dettagli del gelato recuperati con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Gelato.class))
            }),
            @ApiResponse(responseCode = "404", description = "Gelato non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gelateria/gelati/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Gelato> gelateriaGelatiIdGet(
        @Parameter(name = "id", description = "ID del gelato", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"descrizione\" : \"Gelato al cioccolato realizzato con ingredienti di alta qualità.\", \"nome\" : \"nome\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /gelateria/gelati/{id} : Aggiorna un gelato esistente
     *
     * @param id ID del gelato da aggiornare (required)
     * @param gelato  (required)
     * @return Gelato aggiornato con successo (status code 200)
     *         or Gelato non trovato (status code 404)
     *         or Dati non validi (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaGelatiIdPut",
        summary = "Aggiorna un gelato esistente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Gelato aggiornato con successo"),
            @ApiResponse(responseCode = "404", description = "Gelato non trovato"),
            @ApiResponse(responseCode = "400", description = "Dati non validi"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/gelateria/gelati/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gelateriaGelatiIdPut(
        @Parameter(name = "id", description = "ID del gelato da aggiornare", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Gelato", description = "", required = true) @Valid @RequestBody Gelato gelato
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /gelateria/gelati : Aggiungi un gusto nuovo di gelato
     *
     * @param gelato  (required)
     * @return Gelato creato con successo (status code 201)
     *         or Richiesta non valida (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaGelatiPost",
        summary = "Aggiungi un gusto nuovo di gelato",
        responses = {
            @ApiResponse(responseCode = "201", description = "Gelato creato con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gelateria/gelati",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gelateriaGelatiPost(
        @Parameter(name = "Gelato", description = "", required = true) @Valid @RequestBody Gelato gelato
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gelateria/prenota : Ottieni una lista di prenotazioni
     *
     * @return Lista delle prenotazioni ottenuta con successo (status code 200)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotaGet",
        summary = "Ottieni una lista di prenotazioni",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista delle prenotazioni ottenuta con successo", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Prenotazione.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gelateria/prenota",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Prenotazione>> gelateriaPrenotaGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id_prenotante\" : 0, \"id_gelato\" : 6 }, { \"id_prenotante\" : 0, \"id_gelato\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /gelateria/prenota/{id_prenotante}/{id_gelato} : Cancella una prenotazione tramite ID prenotante e ID gelato
     *
     * @param idPrenotante ID del prenotante (required)
     * @param idGelato ID del gelato (required)
     * @return Prenotazione cancellata con successo (status code 204)
     *         or Prenotazione non trovata (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotaIdPrenotanteIdGelatoDelete",
        summary = "Cancella una prenotazione tramite ID prenotante e ID gelato",
        responses = {
            @ApiResponse(responseCode = "204", description = "Prenotazione cancellata con successo"),
            @ApiResponse(responseCode = "404", description = "Prenotazione non trovata"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/gelateria/prenota/{id_prenotante}/{id_gelato}"
    )
    
    default ResponseEntity<Void> gelateriaPrenotaIdPrenotanteIdGelatoDelete(
        @Parameter(name = "id_prenotante", description = "ID del prenotante", required = true, in = ParameterIn.PATH) @PathVariable("id_prenotante") Integer idPrenotante,
        @Parameter(name = "id_gelato", description = "ID del gelato", required = true, in = ParameterIn.PATH) @PathVariable("id_gelato") Integer idGelato
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gelateria/prenota/{id_prenotante}/{id_gelato} : Cerca prenotazione per ID prenotante e ID gelato
     *
     * @param idPrenotante ID del prenotante (required)
     * @param idGelato ID del gelato (required)
     * @return Dettagli della prenotazione recuperati con successo (status code 200)
     *         or Prenotazione non trovata (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotaIdPrenotanteIdGelatoGet",
        summary = "Cerca prenotazione per ID prenotante e ID gelato",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dettagli della prenotazione recuperati con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotazione.class))
            }),
            @ApiResponse(responseCode = "404", description = "Prenotazione non trovata"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gelateria/prenota/{id_prenotante}/{id_gelato}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Prenotazione> gelateriaPrenotaIdPrenotanteIdGelatoGet(
        @Parameter(name = "id_prenotante", description = "ID del prenotante", required = true, in = ParameterIn.PATH) @PathVariable("id_prenotante") Integer idPrenotante,
        @Parameter(name = "id_gelato", description = "ID del gelato", required = true, in = ParameterIn.PATH) @PathVariable("id_gelato") Integer idGelato
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_prenotante\" : 0, \"id_gelato\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /gelateria/prenota/{id_prenotante}/{id_gelato} : Aggiorna una prenotazione esistente
     *
     * @param idPrenotante ID del prenotante (required)
     * @param idGelato ID del gelato (required)
     * @param prenotazione  (required)
     * @return Prenotazione aggiornata con successo (status code 200)
     *         or Prenotazione non trovata (status code 404)
     *         or Dati non validi (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotaIdPrenotanteIdGelatoPut",
        summary = "Aggiorna una prenotazione esistente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotazione aggiornata con successo"),
            @ApiResponse(responseCode = "404", description = "Prenotazione non trovata"),
            @ApiResponse(responseCode = "400", description = "Dati non validi"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/gelateria/prenota/{id_prenotante}/{id_gelato}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gelateriaPrenotaIdPrenotanteIdGelatoPut(
        @Parameter(name = "id_prenotante", description = "ID del prenotante", required = true, in = ParameterIn.PATH) @PathVariable("id_prenotante") Integer idPrenotante,
        @Parameter(name = "id_gelato", description = "ID del gelato", required = true, in = ParameterIn.PATH) @PathVariable("id_gelato") Integer idGelato,
        @Parameter(name = "Prenotazione", description = "", required = true) @Valid @RequestBody Prenotazione prenotazione
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /gelateria/prenota : Aggiungi una nuova prenotazione
     *
     * @param prenotazione  (required)
     * @return Prenotazione creata con successo (status code 201)
     *         or Richiesta non valida (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotaPost",
        summary = "Aggiungi una nuova prenotazione",
        responses = {
            @ApiResponse(responseCode = "201", description = "Prenotazione creata con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gelateria/prenota",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gelateriaPrenotaPost(
        @Parameter(name = "Prenotazione", description = "", required = true) @Valid @RequestBody Prenotazione prenotazione
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gelateria/prenotante : Lista delle persone che prenotano il gelato
     *
     * @return Lista delle persone che prenotano un gelato ottenuta con successo (status code 200)
     *         or Prenotante non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotanteGet",
        summary = "Lista delle persone che prenotano il gelato",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista delle persone che prenotano un gelato ottenuta con successo", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Prenotante.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Prenotante non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gelateria/prenotante",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Prenotante>> gelateriaPrenotanteGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id_prenotante\" : 0, \"nome\" : \"nome\" }, { \"id_prenotante\" : 0, \"nome\" : \"nome\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /gelateria/prenotante/{id_prenotante} : Cancella un prenotante tramite ID
     *
     * @param idPrenotante ID del prenotante da cancellare (required)
     * @return Prenotante cancellato con successo (status code 204)
     *         or Prenotante non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotanteIdPrenotanteDelete",
        summary = "Cancella un prenotante tramite ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Prenotante cancellato con successo"),
            @ApiResponse(responseCode = "404", description = "Prenotante non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/gelateria/prenotante/{id_prenotante}"
    )
    
    default ResponseEntity<Void> gelateriaPrenotanteIdPrenotanteDelete(
        @Parameter(name = "id_prenotante", description = "ID del prenotante da cancellare", required = true, in = ParameterIn.PATH) @PathVariable("id_prenotante") Integer idPrenotante
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /gelateria/prenotante/{id_prenotante} : Cerca prenotante per ID
     *
     * @param idPrenotante ID del prenotante (required)
     * @return Dettagli del prenotante recuperati con successo (status code 200)
     *         or Prenotante non trovato (status code 404)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotanteIdPrenotanteGet",
        summary = "Cerca prenotante per ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dettagli del prenotante recuperati con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Prenotante.class))
            }),
            @ApiResponse(responseCode = "404", description = "Prenotante non trovato"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/gelateria/prenotante/{id_prenotante}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Prenotante> gelateriaPrenotanteIdPrenotanteGet(
        @Parameter(name = "id_prenotante", description = "ID del prenotante", required = true, in = ParameterIn.PATH) @PathVariable("id_prenotante") Integer idPrenotante
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_prenotante\" : 0, \"nome\" : \"nome\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /gelateria/prenotante/{id_prenotante} : Aggiorna un prenotante esistente
     *
     * @param idPrenotante ID del prenotante da aggiornare (required)
     * @param prenotante  (required)
     * @return Prenotante aggiornato con successo (status code 200)
     *         or Prenotante non trovato (status code 404)
     *         or Dati non validi (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotanteIdPrenotantePut",
        summary = "Aggiorna un prenotante esistente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Prenotante aggiornato con successo"),
            @ApiResponse(responseCode = "404", description = "Prenotante non trovato"),
            @ApiResponse(responseCode = "400", description = "Dati non validi"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/gelateria/prenotante/{id_prenotante}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gelateriaPrenotanteIdPrenotantePut(
        @Parameter(name = "id_prenotante", description = "ID del prenotante da aggiornare", required = true, in = ParameterIn.PATH) @PathVariable("id_prenotante") Integer idPrenotante,
        @Parameter(name = "Prenotante", description = "", required = true) @Valid @RequestBody Prenotante prenotante
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /gelateria/prenotante : Aggiungi un prenotante
     *
     * @param prenotante  (required)
     * @return Prenotante creato con successo (status code 201)
     *         or Richiesta non valida (status code 400)
     *         or Errore interno del server (status code 500)
     */
    @Operation(
        operationId = "gelateriaPrenotantePost",
        summary = "Aggiungi un prenotante",
        responses = {
            @ApiResponse(responseCode = "201", description = "Prenotante creato con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida"),
            @ApiResponse(responseCode = "500", description = "Errore interno del server")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/gelateria/prenotante",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> gelateriaPrenotantePost(
        @Parameter(name = "Prenotante", description = "", required = true) @Valid @RequestBody Prenotante prenotante
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
